// Generated by CoffeeScript 1.6.3
(function() {
  var Coffess, DEBUG, LOG_INFO, MD5, exec, fs, jchSaver, path, pub, tools,
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  exec = (require('child_process')).exec;

  MD5 = require('MD5');

  jchSaver = require('./coffess_saver');

  LOG_INFO = "\u001b[1;37m[ JCH ]\u001b[0m\t";

  DEBUG = false;

  tools = {
    getAttribute: function(domString) {
      var regDOMAttr, ret;
      ret = {};
      domString = domString.replace(/,\s*/g, ",");
      regDOMAttr = /([\w]*)[\s]*=[\s]*([\w\/._,]*)/g;
      domString.replace(regDOMAttr, function(match, p1, p2) {
        return ret[p1] = p2;
      });
      return ret;
    }
  };

  Coffess = (function() {
    function Coffess(fp) {
      this._index_js = 0;
      this._index_css = 0;
      this._fp = fp;
      this._prjFp = this._fp.replace(/[\W\w]*src\//, '');
      this._fc = fs.readFileSync(fp, {
        encoding: 'utf8'
      });
      if (this._fc.slice(0, this._fc.indexOf('\n')) !== '{*remove*}') {
        this._moduleInUse = true;
      }
    }

    Coffess.prototype._saveTo = function(source, target) {
      console.log(target + 'Saved');
      return console.log(source);
    };

    Coffess.prototype._wrapJchInfo = function(source, type) {
      this._id = "" + this._prjFp + "_" + type;
      return "/*_JCH_" + this._id + " */\n" + source + "/*" + "" + "_JCH_*/\n";
    };

    Coffess.prototype._resolveCSS = function() {
      var arrP, config, match, offset, origin, source, target, _i, _j, _len, _ref;
      match = arguments[0], arrP = 4 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 2) : (_i = 1, []), offset = arguments[_i++], origin = arguments[_i++];
      config = tools.getAttribute(arrP[0].trim().replace(/['"]/g, ""));
      source = arrP[1];
      if (config.target) {
        _ref = config.target.split(',');
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          target = _ref[_j];
          this._target = path.resolve(path.dirname(this._fp), target);
          this._genCSS(source, target, config.type, this._index_css++);
        }
        return "";
      } else {

      }
      return match;
    };

    Coffess.prototype._genCSS = function(source, target, type, indexHash) {
      var self, tempFile;
      if (!this._moduleInUse) {
        console.error("" + LOG_INFO + "delete CSS from " + target);
        return;
      }
      target = path.resolve(path.dirname(this._fp), target);
      switch (type) {
        case "text/less":
          self = this;
          tempFile = "/tmp/jch_css_" + (MD5(target + type + indexHash));
          fs.writeFileSync(tempFile, source);
          return exec("lessc " + tempFile, function(err, stdout, stderr) {
            fs.unlink(tempFile, function() {});
            if (err) {
              console.error(err);
              return;
            }
            if (DEBUG) {
              console.info(stdout);
            }
            return jchSaver.insert(self._wrapJchInfo(stdout, type), {
              target: target,
              id: self._id,
              fileName: self._fp,
              uid: self._id + indexHash
            });
          });
        default:
          return jchSaver.insert(this._wrapJchInfo(source, type), {
            target: target,
            from: this._fp,
            id: this._id,
            uid: this._id + indexHash
          });
      }
    };

    Coffess.prototype._resolveJS = function() {
      var arrP, config, match, offset, origin, source, target, _i, _j, _len, _ref;
      match = arguments[0], arrP = 4 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 2) : (_i = 1, []), offset = arguments[_i++], origin = arguments[_i++];
      config = tools.getAttribute(arrP[0].trim().replace(/['"]/g, ""));
      source = arrP[1];
      if (config.target) {
        _ref = config.target.split(',');
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          target = _ref[_j];
          this._target = path.resolve(path.dirname(this._fp), target);
          this._genJS(source, target, config.type, this._index_js++);
        }
        return "";
      } else {
        return match;
      }
    };

    Coffess.prototype._genJS = function(source, target, type, indexHash) {
      var self, tempFile;
      if (!this._moduleInUse) {
        console.error("delete!");
        return;
      }
      target = path.resolve(path.dirname(this._fp), target);
      switch (type) {
        case 'text/coffeescript':
          self = this;
          tempFile = "/tmp/jch_js_" + (MD5(target + type + indexHash));
          fs.writeFileSync(tempFile, source);
          return exec("coffee -bcp " + tempFile, function(err, stdout, stderr) {
            fs.unlink(tempFile, function() {});
            if (err) {
              console.log(err);
              return;
            }
            if (DEBUG) {
              console.log("" + LOG_INFO + " Coffee From \"" + self._fp + "\"");
              console.info(stdout);
            }
            return jchSaver.insert(self._wrapJchInfo(stdout, type), {
              target: target,
              id: self._id,
              fileName: self._fp,
              uid: self._id + indexHash
            });
          });
        default:
          return jchSaver.insert(this._wrapJchInfo(source, type), {
            target: target,
            fileName: this._fp,
            id: this._id,
            uid: this._id + indexHash
          });
      }
    };

    Coffess.prototype._genTmpl = function() {};

    Coffess.prototype.handle = function() {
      var regCSS, regJS;
      this._fc = this._fc.replace(/<!--[\w\W]*?-->/g, "");
      regCSS = /<style([^>]*)>([\w\W]*?)<\/style>/g;
      this._fc = this._fc.replace(regCSS, this._resolveCSS.bind(this));
      regJS = /<script([^>]*)>([\w\W]*?)<\/script>/g;
      this._fc = this._fc.replace(regJS, this._resolveJS.bind(this));
      this._fc = this._fc.trim();
      if ((this._fc.replace(/#/g, "")).trim() === "") {
        this._fc = "";
      }
      return jchSaver.save(this._fp, path.resolve(path.dirname(this._fp), "../" + (path.basename(this._fp)).slice(8)), this._fc);
    };

    return Coffess;

  })();

  pub = {
    parse: function(fp, debug) {
      var parser;
      parser = new Coffess(fp);
      parser.debug = debug;
      console.log("\u001b[37m--- Coffess\<" + fp + "\> ---\u001b[0m\t");
      return parser.handle();
    }
  };

  module.exports = pub;

}).call(this);
