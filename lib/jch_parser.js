// Generated by CoffeeScript 1.6.3
(function() {
  var LOG_INFO, MD5, exec, fs, jchSaver, path, pub, tools,
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  exec = (require('child_process')).exec;

  MD5 = require('MD5');

  jchSaver = require('./jch_saver');

  LOG_INFO = "\u001b[1;37m[ JCH ]\u001b[0m\t";

  tools = {
    getAttribute: function(domString) {
      var regDOMAttr, ret;
      ret = {};
      regDOMAttr = /([\w]*)[\s]*=[\s]*([\w\/._]*)/g;
      domString.replace(regDOMAttr, function(match, p1, p2) {
        return ret[p1] = p2;
      });
      return ret;
    }
  };

  pub = {
    _fp: null,
    _prjFp: null,
    _fc: null,
    _moduleInUse: false,
    _load: function(fp) {
      this._fp = fp;
      this._prjFp = this._fp.replace(/[\W\w]*src\//, '');
      this._fc = fs.readFileSync(fp, {
        encoding: 'utf8'
      });
      if (this._fc.slice(0, this._fc.indexOf('\n')) !== '{*remove*}') {
        return this._moduleInUse = true;
      }
    },
    _saveTo: function(source, target) {
      console.log(target + 'Saved');
      return console.log(source);
    },
    _wrapJchInfo: function(source, type) {
      this._id = "" + this._prjFp + "_" + type;
      return "/*_JCH_" + this._id + " */\n" + source + "/*_JCH_*/\n";
    },
    _resolveCSS: function() {
      var arrP, config, match, offset, origin, source, _i;
      match = arguments[0], arrP = 4 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 2) : (_i = 1, []), offset = arguments[_i++], origin = arguments[_i++];
      config = tools.getAttribute(arrP[0].trim().replace(/['"]/g, ""));
      source = arrP[1];
      if (config.target) {
        pub._target = path.resolve(path.dirname(pub._fp), config.target);
        pub._genCSS(source, config.target, config.type);
      }
      return "";
    },
    _genCSS: function(source, target, type) {
      var self, tempFile;
      if (!this._moduleInUse) {
        console.error("" + LOG_INFO + "delete CSS from " + target);
        return;
      }
      target = path.resolve(path.dirname(pub._fp), target);
      switch (type) {
        case "text/less":
          self = this;
          tempFile = "/tmp/jch_" + (MD5(source));
          fs.writeFileSync(tempFile, source);
          return exec("lessc " + tempFile, function(err, stdout, stderr) {
            fs.unlink(tempFile);
            if (err) {
              console.error(err);
              return;
            }
            console.info(stdout);
            return jchSaver.insert(self._wrapJchInfo(stdout, type), {
              target: target,
              id: self._id
            });
          });
        default:
          return jchSaver.insert(this._wrapJchInfo(source, type), {
            target: this._target,
            from: this._fp,
            id: this._id
          });
      }
    },
    _resolveJS: function() {
      var arrP, config, match, offset, origin, source, _i;
      match = arguments[0], arrP = 4 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 2) : (_i = 1, []), offset = arguments[_i++], origin = arguments[_i++];
      config = tools.getAttribute(arrP[0].trim().replace(/['"]/g, ""));
      source = arrP[1];
      if (config.target) {
        pub._target = path.resolve(path.dirname(pub._fp), config.target);
        pub._genJS(source, config.target, config.type);
      }
      return "";
    },
    _genJS: function(source, target, type) {
      var self, tempFile;
      if (!this._moduleInUse) {
        console.error("delete!");
        return;
      }
      target = path.resolve(path.dirname(pub._fp), target);
      switch (type) {
        case 'text/coffeescript':
          self = this;
          tempFile = "/tmp/jch_js_" + (MD5(source));
          fs.writeFileSync(tempFile, source);
          return exec("coffee -bcp " + tempFile, function(err, stdout, stderr) {
            fs.unlink(tempFile);
            if (err) {
              console.log(err);
              return;
            }
            console.log("" + LOG_INFO + " Coffee From \"" + self._fp + "\"");
            console.info(stdout);
            return jchSaver.insert(self._wrapJchInfo(stdout, type), {
              target: self._target,
              id: self._id
            });
          });
        default:
          return jchSaver.insert(self._wrapJchInfo(source, type), {
            target: target,
            from: this._fp,
            id: this._id
          });
      }
    },
    _genTmpl: function() {},
    _prepare: function() {
      var regCSS, regJS;
      this._fc = this._fc.replace(/<!--[\w\W]*?-->/g, "");
      regCSS = /<style([^>]*)>([\w\W]*?)<\/style>/g;
      this._fc = this._fc.replace(regCSS, this._resolveCSS);
      regJS = /<script([^>]*)>([\w\W]*?)<\/script>/g;
      this._fc = this._fc.replace(regJS, this._resolveJS);
      this._fc = this._fc.trim();
      if ((this._fc.replace(/#/g, "")).trim() === "") {
        this._fc = "";
      }
      console.info("" + LOG_INFO + "Start Parse JCH File \"" + this._fp + "\"");
      return jchSaver.save(path.resolve(path.dirname(this._fp), "../" + (path.basename(this._fp)).slice(4)), this._fc);
    },
    parse: function(fp, debug) {
      this.debug = debug;
      this._load(fp);
      return this._prepare();
    }
  };

  module.exports = pub;

}).call(this);
